/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package tugasbesargpcocr;

import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStream;
import java.io.PrintStream;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import com.heatonresearch.book.introneuralnet.neural.som.SelfOrganizingMap;
import com.heatonresearch.book.introneuralnet.neural.som.TrainSelfOrganizingMap;
import com.heatonresearch.book.introneuralnet.neural.som.NormalizeInput.NormalizationType;
import com.heatonresearch.book.introneuralnet.neural.som.TrainSelfOrganizingMap.LearningMethod;

/**
 *
 * @author ali
 */
public class Main extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Main
     */
    
    
    
    public class UpdateStats implements Runnable {
	long _tries;
	double _lastError;
	double _bestError;

	public void run() {
		Main.this.jLabel7.setText("" + this._tries);
		Main.this.jLabel8.setText("" + this._lastError);
		Main.this.jLabel9.setText("" + this._bestError);
	}
    }
    
    static final int DOWNSAMPLE_WIDTH = 5;
    static final int DOWNSAMPLE_HEIGHT = 7;
    static final double MAX_ERROR = 0.01;
    boolean halt;
    DrawArea drawarea;
    Sample sample;
    DefaultListModel letterListModel = new DefaultListModel();	
    SelfOrganizingMap som;
    Thread trainThread = null;
    
    public Main() {
        initComponents();
        this.drawarea = new DrawArea();
	this.drawarea.setLocation(10, 40);
	this.drawarea.setSize(250, 153);
	getContentPane().add(this.drawarea);

	this.sample = new Sample(DOWNSAMPLE_WIDTH, DOWNSAMPLE_HEIGHT);
	this.sample.setLocation(10, 270);
	this.sample.setSize(65, 70);

	this.drawarea.setSample(this.sample);
	getContentPane().add(this.sample);
        this.jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
	this.jScrollPane1.setOpaque(true);
	this.jScrollPane1.getViewport().add(this.letters);
        this.letters.setModel(this.letterListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        letters = new javax.swing.JList();
        load = new javax.swing.JButton();
        train = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        recognize = new javax.swing.JButton();
        downSample = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tugas GPC OCR");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Draw Area");

        letters.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lettersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(letters);

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        train.setText("Begin Training");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Training Results");

        jLabel3.setText("Tries:");

        jLabel4.setText("Last Error:");

        jLabel5.setText("Best Error:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Letters");

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        recognize.setText("Recognize");
        recognize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recognizeActionPerformed(evt);
            }
        });

        downSample.setText("Down Sample");
        downSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downSampleActionPerformed(evt);
            }
        });

        jLabel7.setText("0");

        jLabel8.setText("0");
        jLabel8.setMaximumSize(new java.awt.Dimension(14, 14));

        jLabel9.setText("0");
        jLabel9.setMaximumSize(new java.awt.Dimension(14, 14));

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(downSample, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(recognize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(115, 115, 115)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(train, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addComponent(load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(save, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(load)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(train)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add)
                            .addComponent(recognize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear)
                            .addComponent(downSample))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Load file
    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        try {
		FileReader f;// the actual file stream
		BufferedReader r;// used to read the file line by line

		f = new FileReader(new File("./sample.dat"));
		r = new BufferedReader(f);
		String line;
		int i = 0;

		this.letterListModel.clear();

		while ((line = r.readLine()) != null) {
			final SampleData ds = new SampleData(line.charAt(0), Main.DOWNSAMPLE_WIDTH, Main.DOWNSAMPLE_HEIGHT);
			this.letterListModel.add(i++, ds);
			int idx = 2;
			for (int y = 0; y < ds.getHeight(); y++) {
				for (int x = 0; x < ds.getWidth(); x++) {
					ds.setData(x, y, line.charAt(idx++) == '1');
				}
			}
		}

		r.close();
		f.close();
		clearActionPerformed(null);
		JOptionPane.showMessageDialog(this, "Loaded from 'sample.dat'.", "Training", JOptionPane.PLAIN_MESSAGE);

		} catch (final Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error: " + e, "Training", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_loadActionPerformed

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
        // TODO add your handling code here:
        if (this.trainThread == null) {
		this.train.setText("Stop Training");
		this.train.repaint();
		this.trainThread = new Thread(this);
		this.trainThread.start();
	} else {
		this.halt = true;
	}
    }//GEN-LAST:event_trainActionPerformed
    
    public void update(final int retry, final double totalError, final double bestError) {
        if (this.halt) {
		this.trainThread = null;
		this.train.setText("Begin Training");
		JOptionPane.showMessageDialog(this, "Training has completed.", "Training", JOptionPane.PLAIN_MESSAGE);
		}
		final UpdateStats stats = new UpdateStats();
		stats._tries = retry;
		stats._lastError = totalError;
		stats._bestError = bestError;
		try {
			SwingUtilities.invokeAndWait(stats);
		} catch (final Exception e) {
			JOptionPane.showMessageDialog(this, "Error: " + e, "Training", JOptionPane.ERROR_MESSAGE);
		}
    }
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        
        int i;

	final String letter = JOptionPane.showInputDialog("Silahkan masukkan sebuah huruf:");
	if (letter == null) {
		return;
	}

	if (letter.length() > 1) {
		JOptionPane.showMessageDialog(this, "Tidak boleh lebih dari satu huruf.", "Error", JOptionPane.ERROR_MESSAGE);
		return;
	}

	this.drawarea.downSample();
	final SampleData sampleData = (SampleData) this.sample.getData().clone();
	sampleData.setLetter(letter.charAt(0));

	for (i = 0; i < this.letterListModel.size(); i++) {
		final Comparable str = (Comparable) this.letterListModel.getElementAt(i);
		if (str.equals(letter)) {
			JOptionPane.showMessageDialog(this, "Huruf tersebut telah didefinisikan", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

	if (str.compareTo(sampleData) > 0) {
		this.letterListModel.add(i, sampleData);
		return;
		}
	}
	this.letterListModel.add(this.letterListModel.size(), sampleData);
	this.letters.setSelectedIndex(i);
	this.drawarea.clear();
	this.sample.repaint();
    }//GEN-LAST:event_addActionPerformed
    
    //Clear draw area
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        
        this.drawarea.clear();
        this.sample.getData().clear();
        this.sample.repaint();
    }//GEN-LAST:event_clearActionPerformed

    private void downSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downSampleActionPerformed
        
        this.drawarea.downSample();
    }//GEN-LAST:event_downSampleActionPerformed

    private void lettersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lettersValueChanged
        
        if (this.letters.getSelectedIndex() == -1) {
            return;
	}
	final SampleData selected = (SampleData) this.letterListModel.getElementAt(this.letters.getSelectedIndex());
	this.sample.setData((SampleData) selected.clone());
	this.sample.repaint();
	this.drawarea.clear();
    }//GEN-LAST:event_lettersValueChanged
    
    //Recognize image
    private void recognizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recognizeActionPerformed
        // TODO add your handling code here:
        if (this.som == null) {
		JOptionPane.showMessageDialog(this, "Harus ditrain dahulu!", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
	this.drawarea.downSample();
        
        final double input[] = new double[5 * 7];
	int idx = 0;
	final SampleData ds = this.sample.getData();
	for (int y = 0; y < ds.getHeight(); y++) {
		for (int x = 0; x < ds.getWidth(); x++) {
			input[idx++] = ds.getData(x, y) ? .5 : -.5;
		}
	}

	final int best = this.som.winner(input);
	final char map[] = mapNeurons();
	JOptionPane.showMessageDialog(this, "  " + map[best] + "   (Neuron #" + best + " fired)", "Huruf terekognisi: ", JOptionPane.PLAIN_MESSAGE);
	clearActionPerformed(null);
    }//GEN-LAST:event_recognizeActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        
        try {
		OutputStream os;
		PrintStream ps;

		os = new FileOutputStream("./sample.dat", false);
		ps = new PrintStream(os);

		for (int i = 0; i < this.letterListModel.size(); i++) {
			final SampleData ds = (SampleData) this.letterListModel.elementAt(i);
			ps.print(ds.getLetter() + ":");
			for (int y = 0; y < ds.getHeight(); y++) {
				for (int x = 0; x < ds.getWidth(); x++) {
					ps.print(ds.getData(x, y) ? "1" : "0");
				}
			}
			ps.println("");
		}

		ps.close();
		os.close();
		clearActionPerformed(null);
		JOptionPane.showMessageDialog(this, "Saved to 'sample.dat'.", "Training", JOptionPane.PLAIN_MESSAGE);

		} catch (final Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, "Error: " + e, "Training",
					JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_saveActionPerformed

    char[] mapNeurons() {
	final char map[] = new char[this.letterListModel.size()];

	for (int i = 0; i < map.length; i++) {
		map[i] = '?';
	}
        
	for (int i = 0; i < this.letterListModel.size(); i++) {
		final double input[] = new double[5 * 7];
		int idx = 0;
		final SampleData ds = (SampleData) this.letterListModel.getElementAt(i);
		for (int y = 0; y < ds.getHeight(); y++) {
			for (int x = 0; x < ds.getWidth(); x++) {
				input[idx++] = ds.getData(x, y) ? .5 : -.5;
			}
		}

		final int best = this.som.winner(input);
		map[best] = ds.getLetter();
	}
	return map;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
                new Main().setVisible(true);
                
            
    }
    
        
    public void run(){
        try {
		final int inputNeuron = Main.DOWNSAMPLE_HEIGHT * Main.DOWNSAMPLE_WIDTH;
		final int outputNeuron = this.letterListModel.size();

		final double set[][] = new double[this.letterListModel.size()][inputNeuron];

		for (int t = 0; t < this.letterListModel.size(); t++) {
			int idx = 0;
			final SampleData ds = (SampleData) this.letterListModel.getElementAt(t);
			for (int y = 0; y < ds.getHeight(); y++) {
				for (int x = 0; x < ds.getWidth(); x++) {
					set[t][idx++] = ds.getData(x, y) ? .5 : -.5;
				}
			}
		}

		this.som = new SelfOrganizingMap(inputNeuron, outputNeuron, NormalizationType.MULTIPLICATIVE);
		final TrainSelfOrganizingMap train = new TrainSelfOrganizingMap(this.som, set, LearningMethod.SUBTRACTIVE, 0.5);
		int tries = 1;

		do {
			train.iteration();
			update(tries++, train.getTotalError(), train.getBestError());
		} while ((train.getTotalError() > MAX_ERROR) && !this.halt);

		this.halt = true;
		update(tries, train.getTotalError(), train.getBestError());

		} catch (final Exception e) {
        		e.printStackTrace();
                	JOptionPane.showMessageDialog(this, "Error: " + e, "Training",	JOptionPane.ERROR_MESSAGE);
		}
    }    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton clear;
    private javax.swing.JButton downSample;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList letters;
    private javax.swing.JButton load;
    private javax.swing.JButton recognize;
    private javax.swing.JButton save;
    private javax.swing.JButton train;
    // End of variables declaration//GEN-END:variables
}
